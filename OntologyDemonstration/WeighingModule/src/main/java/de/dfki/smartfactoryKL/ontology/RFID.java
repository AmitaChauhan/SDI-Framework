package de.dfki.smartfactoryKL.ontology;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

import java.util.Collection;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: RFID <br>
 * @version generated on Sat Mar 25 23:36:08 CET 2017 by Utkarsh
 */

public interface RFID extends WrappedIndividual {

    /* ***************************************************
     * Property http://www.semanticweb.org/ontologies/2017/1/WeighingModuleOntology1#getsDataFrom
     */

    /**
     * Gets all property values for the getsDataFrom property.<p>
     * 
     * @returns a collection of values for the getsDataFrom property.
     */
    Collection<? extends WrappedIndividual> getGetsDataFrom();

    /**
     * Checks if the class has a getsDataFrom property value.<p>
     * 
     * @return true if there is a getsDataFrom property value.
     */
    boolean hasGetsDataFrom();

    /**
     * Adds a getsDataFrom property value.<p>
     * 
     * @param newGetsDataFrom the getsDataFrom property value to be added
     */
    void addGetsDataFrom(WrappedIndividual newGetsDataFrom);

    /**
     * Removes a getsDataFrom property value.<p>
     * 
     * @param oldGetsDataFrom the getsDataFrom property value to be removed.
     */
    void removeGetsDataFrom(WrappedIndividual oldGetsDataFrom);


    /* ***************************************************
     * Property http://www.semanticweb.org/ontologies/2017/1/WeighingModuleOntology1#hasContainer
     */

    /**
     * Gets all property values for the hasContainer property.<p>
     * 
     * @returns a collection of values for the hasContainer property.
     */
    Collection<? extends WrappedIndividual> getHasContainer();

    /**
     * Checks if the class has a hasContainer property value.<p>
     * 
     * @return true if there is a hasContainer property value.
     */
    boolean hasHasContainer();

    /**
     * Adds a hasContainer property value.<p>
     * 
     * @param newHasContainer the hasContainer property value to be added
     */
    void addHasContainer(WrappedIndividual newHasContainer);

    /**
     * Removes a hasContainer property value.<p>
     * 
     * @param oldHasContainer the hasContainer property value to be removed.
     */
    void removeHasContainer(WrappedIndividual oldHasContainer);


    /* ***************************************************
     * Property http://www.semanticweb.org/ontologies/2017/1/WeighingModuleOntology1#isKeptOn
     */

    /**
     * Gets all property values for the isKeptOn property.<p>
     * 
     * @returns a collection of values for the isKeptOn property.
     */
    Collection<? extends WrappedIndividual> getIsKeptOn();

    /**
     * Checks if the class has a isKeptOn property value.<p>
     * 
     * @return true if there is a isKeptOn property value.
     */
    boolean hasIsKeptOn();

    /**
     * Adds a isKeptOn property value.<p>
     * 
     * @param newIsKeptOn the isKeptOn property value to be added
     */
    void addIsKeptOn(WrappedIndividual newIsKeptOn);

    /**
     * Removes a isKeptOn property value.<p>
     * 
     * @param oldIsKeptOn the isKeptOn property value to be removed.
     */
    void removeIsKeptOn(WrappedIndividual oldIsKeptOn);


    /* ***************************************************
     * Property http://www.semanticweb.org/ontologies/2017/1/WeighingModuleOntology1#providesDataTo
     */

    /**
     * Gets all property values for the providesDataTo property.<p>
     * 
     * @returns a collection of values for the providesDataTo property.
     */
    Collection<? extends WrappedIndividual> getProvidesDataTo();

    /**
     * Checks if the class has a providesDataTo property value.<p>
     * 
     * @return true if there is a providesDataTo property value.
     */
    boolean hasProvidesDataTo();

    /**
     * Adds a providesDataTo property value.<p>
     * 
     * @param newProvidesDataTo the providesDataTo property value to be added
     */
    void addProvidesDataTo(WrappedIndividual newProvidesDataTo);

    /**
     * Removes a providesDataTo property value.<p>
     * 
     * @param oldProvidesDataTo the providesDataTo property value to be removed.
     */
    void removeProvidesDataTo(WrappedIndividual oldProvidesDataTo);


    /* ***************************************************
     * Property http://www.semanticweb.org/ontologies/2017/1/WeighingModuleOntology1#Inventory
     */

    /**
     * Gets all property values for the Inventory property.<p>
     * 
     * @returns a collection of values for the Inventory property.
     */
    Collection<? extends Integer> getInventory();

    /**
     * Checks if the class has a Inventory property value.<p>
     * 
     * @return true if there is a Inventory property value.
     */
    boolean hasInventory();

    /**
     * Adds a Inventory property value.<p>
     * 
     * @param newInventory the Inventory property value to be added
     */
    void addInventory(Integer newInventory);

    /**
     * Removes a Inventory property value.<p>
     * 
     * @param oldInventory the Inventory property value to be removed.
     */
    void removeInventory(Integer oldInventory);



    /* ***************************************************
     * Property http://www.semanticweb.org/ontologies/2017/1/WeighingModuleOntology1#Part_description
     */

    /**
     * Gets all property values for the Part_description property.<p>
     * 
     * @returns a collection of values for the Part_description property.
     */
    Collection<? extends String> getPart_description();

    /**
     * Checks if the class has a Part_description property value.<p>
     * 
     * @return true if there is a Part_description property value.
     */
    boolean hasPart_description();

    /**
     * Adds a Part_description property value.<p>
     * 
     * @param newPart_description the Part_description property value to be added
     */
    void addPart_description(String newPart_description);

    /**
     * Removes a Part_description property value.<p>
     * 
     * @param oldPart_description the Part_description property value to be removed.
     */
    void removePart_description(String oldPart_description);



    /* ***************************************************
     * Property http://www.semanticweb.org/ontologies/2017/1/WeighingModuleOntology1#Tolerance_of_weight
     */

    /**
     * Gets all property values for the Tolerance_of_weight property.<p>
     * 
     * @returns a collection of values for the Tolerance_of_weight property.
     */
    Collection<? extends Object> getTolerance_of_weight();

    /**
     * Checks if the class has a Tolerance_of_weight property value.<p>
     * 
     * @return true if there is a Tolerance_of_weight property value.
     */
    boolean hasTolerance_of_weight();

    /**
     * Adds a Tolerance_of_weight property value.<p>
     * 
     * @param newTolerance_of_weight the Tolerance_of_weight property value to be added
     */
    void addTolerance_of_weight(Object newTolerance_of_weight);

    /**
     * Removes a Tolerance_of_weight property value.<p>
     * 
     * @param oldTolerance_of_weight the Tolerance_of_weight property value to be removed.
     */
    void removeTolerance_of_weight(Object oldTolerance_of_weight);



    /* ***************************************************
     * Property http://www.semanticweb.org/ontologies/2017/1/WeighingModuleOntology1#Total_number_of_parts
     */

    /**
     * Gets all property values for the Total_number_of_parts property.<p>
     *
     * @returns a collection of values for the Total_number_of_parts property.
     */
    Collection<? extends Object> getTotal_number_of_parts();

    /**
     * Checks if the class has a Total_number_of_parts property value.<p>
     *
     * @return true if there is a Total_number_of_parts property value.
     */
    boolean hasTotal_number_of_parts();

    /**
     * Adds a Total_number_of_parts property value.<p>
     *
     * @param newTotal_number_of_parts the Total_number_of_parts property value to be added
     */
    void addTotal_number_of_parts(Object newTotal_number_of_parts);

    /**
     * Removes a Total_number_of_parts property value.<p>
     *
     * @param oldTotal_number_of_parts the Total_number_of_parts property value to be removed.
     */
    void removeTotal_number_of_parts(Object oldTotal_number_of_parts);



    /* ***************************************************
     * Property http://www.semanticweb.org/ontologies/2017/1/WeighingModuleOntology1#Weight_per_piece
     */

    /**
     * Gets all property values for the Weight_per_piece property.<p>
     *
     * @returns a collection of values for the Weight_per_piece property.
     */
    Collection<? extends Object> getWeight_per_piece();

    /**
     * Checks if the class has a Weight_per_piece property value.<p>
     *
     * @return true if there is a Weight_per_piece property value.
     */
    boolean hasWeight_per_piece();

    /**
     * Adds a Weight_per_piece property value.<p>
     *
     * @param newWeight_per_piece the Weight_per_piece property value to be added
     */
    void addWeight_per_piece(Object newWeight_per_piece);

    /**
     * Removes a Weight_per_piece property value.<p>
     *
     * @param oldWeight_per_piece the Weight_per_piece property value to be removed.
     */
    void removeWeight_per_piece(Object oldWeight_per_piece);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
