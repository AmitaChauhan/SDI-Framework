package de.dfki.smartfactoryKL.ontology;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

import java.util.Collection;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: WeighingModule <br>
 * @version generated on Sat Mar 25 23:36:09 CET 2017 by Utkarsh
 */

public interface WeighingModule extends WrappedIndividual {

    /* ***************************************************
     * Property http://www.semanticweb.org/ontologies/2017/1/WeighingModuleOntology1#getsDataFrom
     */

    /**
     * Gets all property values for the getsDataFrom property.<p>
     * 
     * @returns a collection of values for the getsDataFrom property.
     */
    Collection<? extends WrappedIndividual> getGetsDataFrom();

    /**
     * Checks if the class has a getsDataFrom property value.<p>
     * 
     * @return true if there is a getsDataFrom property value.
     */
    boolean hasGetsDataFrom();

    /**
     * Adds a getsDataFrom property value.<p>
     * 
     * @param newGetsDataFrom the getsDataFrom property value to be added
     */
    void addGetsDataFrom(WrappedIndividual newGetsDataFrom);

    /**
     * Removes a getsDataFrom property value.<p>
     * 
     * @param oldGetsDataFrom the getsDataFrom property value to be removed.
     */
    void removeGetsDataFrom(WrappedIndividual oldGetsDataFrom);


    /* ***************************************************
     * Property http://www.semanticweb.org/ontologies/2017/1/WeighingModuleOntology1#hasContainer
     */

    /**
     * Gets all property values for the hasContainer property.<p>
     * 
     * @returns a collection of values for the hasContainer property.
     */
    Collection<? extends WrappedIndividual> getHasContainer();

    /**
     * Checks if the class has a hasContainer property value.<p>
     * 
     * @return true if there is a hasContainer property value.
     */
    boolean hasHasContainer();

    /**
     * Adds a hasContainer property value.<p>
     * 
     * @param newHasContainer the hasContainer property value to be added
     */
    void addHasContainer(WrappedIndividual newHasContainer);

    /**
     * Removes a hasContainer property value.<p>
     * 
     * @param oldHasContainer the hasContainer property value to be removed.
     */
    void removeHasContainer(WrappedIndividual oldHasContainer);


    /* ***************************************************
     * Property http://www.semanticweb.org/ontologies/2017/1/WeighingModuleOntology1#isKeptOn
     */

    /**
     * Gets all property values for the isKeptOn property.<p>
     * 
     * @returns a collection of values for the isKeptOn property.
     */
    Collection<? extends WrappedIndividual> getIsKeptOn();

    /**
     * Checks if the class has a isKeptOn property value.<p>
     * 
     * @return true if there is a isKeptOn property value.
     */
    boolean hasIsKeptOn();

    /**
     * Adds a isKeptOn property value.<p>
     * 
     * @param newIsKeptOn the isKeptOn property value to be added
     */
    void addIsKeptOn(WrappedIndividual newIsKeptOn);

    /**
     * Removes a isKeptOn property value.<p>
     * 
     * @param oldIsKeptOn the isKeptOn property value to be removed.
     */
    void removeIsKeptOn(WrappedIndividual oldIsKeptOn);


    /* ***************************************************
     * Property http://www.semanticweb.org/ontologies/2017/1/WeighingModuleOntology1#providesDataTo
     */

    /**
     * Gets all property values for the providesDataTo property.<p>
     * 
     * @returns a collection of values for the providesDataTo property.
     */
    Collection<? extends WrappedIndividual> getProvidesDataTo();

    /**
     * Checks if the class has a providesDataTo property value.<p>
     * 
     * @return true if there is a providesDataTo property value.
     */
    boolean hasProvidesDataTo();

    /**
     * Adds a providesDataTo property value.<p>
     * 
     * @param newProvidesDataTo the providesDataTo property value to be added
     */
    void addProvidesDataTo(WrappedIndividual newProvidesDataTo);

    /**
     * Removes a providesDataTo property value.<p>
     * 
     * @param oldProvidesDataTo the providesDataTo property value to be removed.
     */
    void removeProvidesDataTo(WrappedIndividual oldProvidesDataTo);


    /* ***************************************************
     * Property http://www.semanticweb.org/ontologies/2017/1/WeighingModuleOntology1#Precision_of_weighing_sensor
     */

    /**
     * Gets all property values for the Precision_of_weighing_sensor property.<p>
     * 
     * @returns a collection of values for the Precision_of_weighing_sensor property.
     */
    Collection<? extends Object> getPrecision_of_weighing_sensor();

    /**
     * Checks if the class has a Precision_of_weighing_sensor property value.<p>
     * 
     * @return true if there is a Precision_of_weighing_sensor property value.
     */
    boolean hasPrecision_of_weighing_sensor();

    /**
     * Adds a Precision_of_weighing_sensor property value.<p>
     * 
     * @param newPrecision_of_weighing_sensor the Precision_of_weighing_sensor property value to be added
     */
    void addPrecision_of_weighing_sensor(Object newPrecision_of_weighing_sensor);

    /**
     * Removes a Precision_of_weighing_sensor property value.<p>
     * 
     * @param oldPrecision_of_weighing_sensor the Precision_of_weighing_sensor property value to be removed.
     */
    void removePrecision_of_weighing_sensor(Object oldPrecision_of_weighing_sensor);



    /* ***************************************************
     * Property http://www.semanticweb.org/ontologies/2017/1/WeighingModuleOntology1#Total_number_of_parts
     */

    /**
     * Gets all property values for the Total_number_of_parts property.<p>
     *
     * @returns a collection of values for the Total_number_of_parts property.
     */
    Collection<? extends Object> getTotal_number_of_parts();

    /**
     * Checks if the class has a Total_number_of_parts property value.<p>
     *
     * @return true if there is a Total_number_of_parts property value.
     */
    boolean hasTotal_number_of_parts();

    /**
     * Adds a Total_number_of_parts property value.<p>
     *
     * @param newTotal_number_of_parts the Total_number_of_parts property value to be added
     */
    void addTotal_number_of_parts(Object newTotal_number_of_parts);

    /**
     * Removes a Total_number_of_parts property value.<p>
     *
     * @param oldTotal_number_of_parts the Total_number_of_parts property value to be removed.
     */
    void removeTotal_number_of_parts(Object oldTotal_number_of_parts);



    /* ***************************************************
     * Property http://www.semanticweb.org/ontologies/2017/1/WeighingModuleOntology1#Total_weight
     */

    /**
     * Gets all property values for the Total_weight property.<p>
     *
     * @returns a collection of values for the Total_weight property.
     */
    Collection<? extends Object> getTotal_weight();

    /**
     * Checks if the class has a Total_weight property value.<p>
     *
     * @return true if there is a Total_weight property value.
     */
    boolean hasTotal_weight();

    /**
     * Adds a Total_weight property value.<p>
     *
     * @param newTotal_weight the Total_weight property value to be added
     */
    void addTotal_weight(Object newTotal_weight);

    /**
     * Removes a Total_weight property value.<p>
     *
     * @param oldTotal_weight the Total_weight property value to be removed.
     */
    void removeTotal_weight(Object oldTotal_weight);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
